<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo压缩代码使用Gulp时因4.0版本原因提示assert.js报错]]></title>
    <url>%2Fposts%2F74d69307.html</url>
    <content type="text"><![CDATA[Gulp报错的说明在hexo 最新3.8版本里面安装gulp 进行压缩。发现会进行报错。百思不得其解，发现是因为网络上的gulp教程均适用于 gulp 4.0 版本以下 ，如果是安装了最新的gulp 4.0 版本的情况下，则就会进行报错。解决办法在下面有说明 12345678910111213141516λ gulpassert.js:350 throw err; ^AssertionError [ERR_ASSERTION]: Task function must be specified at Gulp.set [as _setTask] (C:\lweein\SkywenWork\Code\lweeintalk\node_modules\undertaker\lib\set-task.js:10:3) at Gulp.task (C:\lweein\SkywenWork\Code\lweeintalk\node_modules\undertaker\lib\task.js:13:8) at Object.&lt;anonymous&gt; (C:\lweein\SkywenWork\Code\lweeintalk\gulpfile.js:31:6) at Module._compile (internal/modules/cjs/loader.js:689:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10) at Module.load (internal/modules/cjs/loader.js:599:32) at tryModuleLoad (internal/modules/cjs/loader.js:538:12) at Function.Module._load (internal/modules/cjs/loader.js:530:3) at Module.require (internal/modules/cjs/loader.js:637:17) at require (internal/modules/cjs/helpers.js:22:18) 正常的配置文件1234567891011121314151617181920212223242526272829var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');// 压缩 public 目录 cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩 public/js 目录 jsgulp.task('minify-js', function() &#123; return gulp.src('./public/js/**/*.js') .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;); 那么在上面的配置上是没有问题。这里压缩了 CSS HTML 还有JS。问题出在下面实际走task的时候 适用 3.9或者以下版本1234// 执行 gulp 命令时执行的任务gulp.task('default', [ 'minify-html','minify-css','minify-js']); 这个实际上适用于gulp 3.9 版本的写法 ，如果在全新安装gulp的情况下，gulp可以在dependencies里面看到最新的版本已经被安装了4.0。所以一定会进行报错。无法在hexo里面进行正常的跑起来。所以如果是gulp 4.0的情况下，一定要改写成下面的方式 适用 4.0 或以上版本1234// gulp 4.0 适用的方式gulp.task('build', gulp.parallel('minify-html', 'minify-css', 'minify-js' //build the website)); 具体要看gulp 在3.9和4.0之间的区别那么可以参考官方文档或者百度。这里只给出具体解决方式。 正常编译过程12345678910λ gulp build[21:39:17] Using gulpfile XXXXXXX gulpfile.js[21:39:17] Starting 'build'...[21:39:17] Starting 'minify-html'...[21:39:17] Starting 'minify-css'...[21:39:17] Starting 'minify-js'...[21:39:19] Finished 'minify-js' after 1.85 s[21:39:19] Finished 'minify-html' after 2.23 s[21:39:19] Finished 'minify-css' after 2.23 s[21:39:19] Finished 'build' after 2.24 s]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next 网站程序部署]]></title>
    <url>%2Fposts%2Fccc6649.html</url>
    <content type="text"><![CDATA[网站部署说明网站使用Hexo 纯静态博客程序 + Next 主题 最新的 6.0 版本进行构建。在本地进行安装，配置和调试工作。目前的使用方式是使用 hexo yuque 插件，在语雀编辑器上进行文章编辑，因为这个编辑器用起来的感觉是最舒服的。 语雀编辑器的使用现在的文章编写之后，需要在本地进行文章拉取，然后构建，测试和发布，听说12月24日开始语雀开放全平台的webhook的方式，那么应该可以做到，语雀发布文章之后，触发webhook，然后推送到Git平台，然后通过Cl的持续构建，比如Jenkins或者其他方式，进行云端构建，然后通过YML的脚本，进行自动发布和部署。 Next 主题的使用原来在使用wordpress的时候，在Github上用过一段时间的Next主题的改造版本，留下了很深的印象。现在开始使用Hexo之后，发现Next 仿佛是最受欢迎的主题之一。而且在初步调试和使用过程中发现确实很不错。当然开始是找到了5.0版本的，因为搜索到了中文的文档，后来发现最新的已经是6.6版本的，在Github上。然后在5.0升级到 6.0的过程中，遇到了一个大坑。就是无法进行直接升级，必须进行主题替换，然后_config.yml 文件进行修改和重新配置才可以，并不能直接升级，好尴尬。 线上部署COS+CDN 和Github 的搭配考虑到在阿里云和腾讯云上使用的比较顺手，同时已经有了很成熟的COS+CDN+HEXO的方案，同时使用腾讯云COS自定义域名的话必须在腾讯云有国内备案，而且亲测这个国内打开的速度确实是很快。所以https://www.lweein.cn 主力域名配备到了CDN上，对COS进行加速，同时配备了HTTPS 和HTTPS 2.0 以及CDN层面上的智能压缩，Gzip等一系列的优化方式。 Github 上应该说只是一种Git Type 推送的尝试，因为打开速度确实只能说一般，在国内，可能2019年后会逐步考虑国际层面上的优化和处理。暂时只需要Github上可以同时推送即可。 Coding Git 私有代码库存储网站源代码基于COS+CDN和Github的部署是网站最终展现的形式，但是对于网站程序的源代码还是需要一个存放的地方，本来考虑的是Coding，因为是黄金会员，最近发现Coding好像和腾讯云深度合作，全部升级为腾讯云开发平台还是什么的。只好升级到那里之后，创建一个私有Git代码库，用来存放程序源代码。 发现升级之后是有持续构建的功能，仿佛是云上自动可以跑Jenkins，只需要编写一个JenkinsFile 就可以，这个脚本可以让公司的小伙伴帮忙处理一下，后期看能否依托于全新的腾讯云+Coding的平台，达到持续构建的目的。 当然，后期还是会考虑测试一下使用Docker 进行构建和测试。体验一下差别。后期也会考虑测试一下Flow.Cl，或者Travis.Cl的方式。 持续构建和集成现在的流程比较原始，语雀编写，本地文章拉取，本地构建测试，本地deploy到云端。除了发布到云上之外，还要git push 源代码。 接下来主要考虑就是依托于 语雀的webhook，触发Git，进行Jenkins或Docker进行自动构建，自动deploy到发布平台。最终做到 语雀肆意发布文章，保存之后，若干时间之后 。。。全部发布完成 。 当然，后期还会继续探索，多平台的发布方式，比如简书，比如知乎，比如人人都是产品经理等等众多投稿平台，以及微博公众号等等。虽然可能很难做到同步推送。但是尽可能做到一个智能化的方式。 程序上的功能优化和性能优化现在Hexo和Next 都进行了多种情况下的优化，也安装了很多的组件，后期会专门编写一个帖子，来记录和说明一下所做的优化。否则自己一定会忘记的。那么后期进行整理的时候就会比较被动了。 任何技术路线，文档，注释，都是 必须得有的啊 。 SEO的优化和国际化的拓展暂时制作了百度的提交，因为插件和方案比较成熟，接下来会考虑集成一下 熊掌号 。以及Google的收入，以及其他各类seo的优化方式。]]></content>
  </entry>
  <entry>
    <title><![CDATA[【MacType】win10使用mac字体]]></title>
    <url>%2Fposts%2Fdc806ffb.html</url>
    <content type="text"><![CDATA[说明 使用MacType工具使得win10可以使用mac的字体 视觉效果特别棒 教程更新时间 20181019 教程找到github的mactype的地址1234#Mactype项目地址 https://github.com/snowie2000/mactype#下载地址https://github.com/snowie2000/mactype/releases/tag/1.2018.917.0-beta2 安装MacTypeInstaller文件 使用典型typical方式进行安装即可 进入操作界面 这里要注意，根据原作者的意思，使用win10的用户不要使用注册表模式加载，最好是用服务加载，或者是托盘加载的方式 解压缩最新的beta文件夹 找到安装目录，通常是 C:\Program Files\MacType 这一步很重要，把解压缩里面看到的每一个文件，在C盘文件夹里面找到，然后全部重新命名，然后再把压缩包里面的每一个文件复制进去，否则会因为权限问题无法正常复制重新启动电脑即可这样就可以在win10上使用mac的字体效果了！ 附件 在这里把两个文件放在这里供直接下载12链接: https://pan.baidu.com/s/1rULfnJI77h8ARMwmC6xsqg 提取码: 5647 复制这段内容后打开百度网盘手机App，操作更方便哦]]></content>
  </entry>
</search>
